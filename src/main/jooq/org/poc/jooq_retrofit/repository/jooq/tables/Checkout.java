/*
 * This file is generated by jOOQ.
 */
package org.poc.jooq_retrofit.repository.jooq.tables;

import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.poc.jooq_retrofit.repository.jooq.Keys;
import org.poc.jooq_retrofit.repository.jooq.Public;
import org.poc.jooq_retrofit.repository.jooq.tables.records.CheckoutRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Checkout extends TableImpl<CheckoutRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.checkout</code> */
  public static final Checkout CHECKOUT = new Checkout();

  /** The class holding records for this type */
  @Override
  public Class<CheckoutRecord> getRecordType() {
    return CheckoutRecord.class;
  }

  /** The column <code>public.checkout.id</code>. */
  public final TableField<CheckoutRecord, UUID> ID =
      createField(
          DSL.name("id"),
          SQLDataType.UUID
              .nullable(false)
              .defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)),
          this,
          "");

  /** The column <code>public.checkout.description</code>. */
  public final TableField<CheckoutRecord, String> DESCRIPTION =
      createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>public.checkout.status</code>. */
  public final TableField<CheckoutRecord, String> STATUS =
      createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>public.checkout.created</code>. */
  public final TableField<CheckoutRecord, OffsetDateTime> CREATED =
      createField(
          DSL.name("created"),
          SQLDataType.TIMESTAMPWITHTIMEZONE(6)
              .nullable(false)
              .defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)),
          this,
          "");

  /** The column <code>public.checkout.updated</code>. */
  public final TableField<CheckoutRecord, OffsetDateTime> UPDATED =
      createField(
          DSL.name("updated"),
          SQLDataType.TIMESTAMPWITHTIMEZONE(6)
              .nullable(false)
              .defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)),
          this,
          "");

  private Checkout(Name alias, Table<CheckoutRecord> aliased) {
    this(alias, aliased, null);
  }

  private Checkout(Name alias, Table<CheckoutRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>public.checkout</code> table reference */
  public Checkout(String alias) {
    this(DSL.name(alias), CHECKOUT);
  }

  /** Create an aliased <code>public.checkout</code> table reference */
  public Checkout(Name alias) {
    this(alias, CHECKOUT);
  }

  /** Create a <code>public.checkout</code> table reference */
  public Checkout() {
    this(DSL.name("checkout"), null);
  }

  public <O extends Record> Checkout(Table<O> child, ForeignKey<O, CheckoutRecord> key) {
    super(child, key, CHECKOUT);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<CheckoutRecord> getPrimaryKey() {
    return Keys.CHECKOUT_PKEY;
  }

  @Override
  public Checkout as(String alias) {
    return new Checkout(DSL.name(alias), this);
  }

  @Override
  public Checkout as(Name alias) {
    return new Checkout(alias, this);
  }

  @Override
  public Checkout as(Table<?> alias) {
    return new Checkout(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Checkout rename(String name) {
    return new Checkout(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Checkout rename(Name name) {
    return new Checkout(name, null);
  }

  /** Rename this table */
  @Override
  public Checkout rename(Table<?> name) {
    return new Checkout(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<UUID, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
    return (Row5) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function5<
              ? super UUID,
              ? super String,
              ? super String,
              ? super OffsetDateTime,
              ? super OffsetDateTime,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function5<
              ? super UUID,
              ? super String,
              ? super String,
              ? super OffsetDateTime,
              ? super OffsetDateTime,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
